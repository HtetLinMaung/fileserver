"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadFileChunks = exports.pickFile = void 0;
const axios_1 = require("axios");
const pickFile = async (options = {}) => {
    return new Promise((resolve, reject) => {
        try {
            const element = document.createElement("input");
            element.type = "file";
            element.click();
            element.addEventListener("change", (e) => {
                const file = e.target.files[0];
                element.value = "";
                resolve(file);
            });
        }
        catch (err) {
            reject(err);
        }
    });
};
exports.pickFile = pickFile;
const splitFileChunks = (file, size = 1024 * 50) => {
    //50KB Section size default
    const fileChunks = [];
    let index = 0; //Section num
    for (let cur = 0; cur < file.size; cur += size) {
        fileChunks.push({
            hash: index++,
            chunk: file.slice(cur, cur + size),
        });
    }
    return fileChunks;
};
const uploadFileChunks = async (mergeUrl, uploadUrl) => {
    const file = await (0, exports.pickFile)();
    return uploadChunks(mergeUrl, uploadUrl, file.name, splitFileChunks(file));
};
exports.uploadFileChunks = uploadFileChunks;
const uploadChunks = async (mergeUrl, uploadUrl, filename, list = [], token = "") => {
    if (list.length === 0) {
        //All tasks complete, merge slices
        await (0, axios_1.default)({
            method: "get",
            url: mergeUrl,
            params: {
                filename,
            },
            headers: {
                Authorization: `Bearer ${token}`,
            },
        });
        console.log("Upload to complete");
        return;
    }
    let pool = []; //Concurrent pool
    let max = 3; //Maximum concurrency
    let finish = 0; //Quantity completed
    let failList = []; //A list of failures
    for (let i = 0; i < list.length; i++) {
        let item = list[i];
        let formData = new FormData();
        formData.append("filename", filename);
        formData.append("hash", item.hash.toString());
        formData.append("chunk", item.chunk);
        // Upload section
        let task = (0, axios_1.default)({
            method: "post",
            url: uploadUrl,
            data: formData,
            headers: {
                Authorization: `Bearer ${token}`,
            },
        });
        task
            .then((data) => {
            //Remove the Promise task from the concurrency pool when the request ends
            let index = pool.findIndex((t) => t === task);
            pool.splice(index);
        })
            .catch(() => {
            failList.push(item);
        })
            .finally(() => {
            finish++;
            //All requests are requested complete
            if (finish === list.length) {
                uploadChunks(mergeUrl, uploadUrl, filename, failList);
            }
        });
        pool.push(task);
        if (pool.length === max) {
            //Each time the concurrent pool finishes running a task, another task is plugged in
            await Promise.race(pool);
        }
    }
};
